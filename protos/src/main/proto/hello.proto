syntax = "proto3";

package dev.baseio.slackdata.protos;

option java_multiple_files = true;

message SKMessage {
  string uuid = 1;
  string workspaceId = 2;
  string channelId = 3;
  string text = 4;
  string receiver = 5;
  string sender = 6;
  int64 createdDate = 7;
  int64 modifiedDate = 8;
  SKUser senderInfo = 9;
}

message SKLastMessage {
  SKChannel channel = 1;
  SKMessage lastMessage = 2;
}

message SKWorkspace {
  string uuid = 1;
  string name = 2;
  string domain = 3;
  string picUrl = 4;
  bool lastSelected = 5;
}

message SKUser {
  string uuid = 1;
  string workspaceId = 2;
  string gender = 3;
  string name = 4;
  string location = 5;
  string email = 6;
  string username = 7;
  int64 userSince = 8;
  string phone = 9;
  string avatarUrl = 10;
}

message SKChannel {
  string uuid = 1;
  string workspaceId = 2;
  string name = 3;
  int64 createdDate = 4;
  int64 modifiedDate = 5;
  bool isMuted = 6;
  bool isPrivate = 7;
  bool isStarred = 8;
  bool isShareOutSide = 9;
  bool isOneToOne = 10;
  string avatarUrl = 11;
}

message SKWorkspaces {
  repeated SKWorkspace workspaces = 1;
}

message SKUsers {
  repeated SKUser users = 1;
}

message SKChannels {
  repeated SKChannel channels = 1;
}

message SKMessages{
  repeated SKMessage messages = 1;
}

message SKAuthUser {
  string email = 1;
  string password = 2;
  SKUser user = 3;
}

message SKStatus{
  string information = 1;
  string statusCode = 2;
}

message SKAuthResult{
  string token = 1;
  string refreshToken = 2;
  SKStatus status = 3;
}

message SKWorkspaceChannelRequest{
  string workspaceId = 1;
  string channelId = 2;
}

message SKChannelRequest{
  string workspaceId = 1;
}

message SKCreateWorkspaceRequest{
  SKWorkspace workspace = 1;
  SKAuthUser user = 2;
}

message Empty {
  string nothing = 1;
}

message SKMessagesRequest{
  int32 pageno = 1;
  int32 size = 2;
}

message SKFindWorkspacesRequest{
  string email = 1;
  string name = 2;
}

message SKDeleteMessageRequest{
  string userid = 1;
}

service WorkspaceService {
  rpc getWorkspaces(Empty) returns (stream SKWorkspaces);
  rpc saveWorkspace(SKCreateWorkspaceRequest) returns (SKAuthResult);
  rpc findWorkspacesForEmail(SKFindWorkspacesRequest) returns(SKWorkspaces);
  rpc findWorkspaceForName(SKFindWorkspacesRequest) returns(SKWorkspace);
}

service ChannelsService{
  rpc getChannelChangeStream(SKChannelRequest) returns (stream SKChannel);
  rpc getChannels(SKChannelRequest) returns (SKChannels);
  rpc saveChannel(SKChannel) returns (SKChannel);
}

service MessagesService{
  rpc getMessagespaginated(SKMessagesRequest) returns (SKMessages);
  rpc suscribeToDeletedMessages(SKDeleteMessageRequest) returns (SKMessage);
  rpc getMessages(SKWorkspaceChannelRequest) returns (SKMessages);
  rpc saveMessage(SKMessage) returns (SKMessage);
  rpc subscribeToChanges(SKWorkspaceChannelRequest) returns (stream SKMessage);
}

service UsersService{
  rpc getUsers(SKWorkspaceChannelRequest) returns (SKUsers);
  rpc subscribeToChanges(SKWorkspaceChannelRequest) returns (stream SKUser);

  rpc saveUser(SKUser) returns (SKUser);
  rpc currentLoggedInUser(Empty) returns (SKUser);
}

service AuthService {
  rpc register(SKAuthUser) returns (SKAuthResult);
  rpc login(SKAuthUser) returns (SKAuthResult);
  rpc resetPassword(SKAuthUser) returns (SKUser);
  rpc forgotPassword(SKAuthUser) returns (SKUser);
}